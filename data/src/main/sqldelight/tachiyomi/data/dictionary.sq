CREATE TABLE dictionaries (
    _id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    revision TEXT NOT NULL,
    version INTEGER NOT NULL,
    author TEXT,
    url TEXT,
    description TEXT,
    attribution TEXT,
    is_enabled INTEGER NOT NULL DEFAULT 1, -- 1 for true, 0 for false
    priority INTEGER NOT NULL DEFAULT 0,
    date_added INTEGER NOT NULL,
    UNIQUE(title, revision)
);

CREATE INDEX dictionaries_title ON dictionaries(title);
CREATE INDEX dictionaries_is_enabled ON dictionaries(is_enabled);

CREATE TABLE dictionary_tags (
    _id INTEGER PRIMARY KEY AUTOINCREMENT,
    dictionary_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    category TEXT NOT NULL,
    tag_order INTEGER NOT NULL,
    notes TEXT NOT NULL,
    score INTEGER NOT NULL,
    FOREIGN KEY(dictionary_id) REFERENCES dictionaries(_id) ON DELETE CASCADE,
    UNIQUE(dictionary_id, name)
);

CREATE INDEX dictionary_tags_dictionary_id ON dictionary_tags(dictionary_id);
CREATE INDEX dictionary_tags_name ON dictionary_tags(name);

CREATE TABLE dictionary_terms (
    _id INTEGER PRIMARY KEY AUTOINCREMENT,
    dictionary_id INTEGER NOT NULL,
    expression TEXT NOT NULL,
    reading TEXT NOT NULL,
    definition_tags TEXT,
    rules TEXT,
    score INTEGER NOT NULL,
    glossary TEXT NOT NULL,
    sequence INTEGER,
    term_tags TEXT,
    FOREIGN KEY(dictionary_id) REFERENCES dictionaries(_id) ON DELETE CASCADE
);

CREATE INDEX dictionary_terms_dictionary_id ON dictionary_terms(dictionary_id);
CREATE INDEX dictionary_terms_expression ON dictionary_terms(expression);
CREATE INDEX dictionary_terms_reading ON dictionary_terms(reading);
CREATE INDEX dictionary_terms_sequence ON dictionary_terms(sequence);

-- Compound indexes for better search performance
CREATE INDEX dictionary_terms_dict_expr_score ON dictionary_terms(dictionary_id, expression, score DESC);
CREATE INDEX dictionary_terms_dict_read_score ON dictionary_terms(dictionary_id, reading, score DESC);

-- FTS4 for fast search (FTS5 not used for device compatibility)
CREATE VIRTUAL TABLE IF NOT EXISTS dictionary_terms_fts USING fts4(
    expression,
    reading,
    content=dictionary_terms
);

-- Triggers to keep FTS table in sync with main table
CREATE TRIGGER IF NOT EXISTS dictionary_terms_ai AFTER INSERT ON dictionary_terms BEGIN
    INSERT INTO dictionary_terms_fts(rowid, expression, reading)
    VALUES (new._id, new.expression, new.reading);
END;

CREATE TRIGGER IF NOT EXISTS dictionary_terms_bd BEFORE DELETE ON dictionary_terms BEGIN
    DELETE FROM dictionary_terms_fts WHERE docid = old._id;
END;

CREATE TRIGGER IF NOT EXISTS dictionary_terms_bu BEFORE UPDATE ON dictionary_terms BEGIN
    DELETE FROM dictionary_terms_fts WHERE docid = old._id;
    INSERT INTO dictionary_terms_fts(rowid, expression, reading)
    VALUES (new._id, new.expression, new.reading);
END;

CREATE TABLE dictionary_kanji (
    _id INTEGER PRIMARY KEY AUTOINCREMENT,
    dictionary_id INTEGER NOT NULL,
    character TEXT NOT NULL,
    onyomi TEXT NOT NULL,
    kunyomi TEXT NOT NULL,
    tags TEXT,
    meanings TEXT NOT NULL,
    stats TEXT,
    FOREIGN KEY(dictionary_id) REFERENCES dictionaries(_id) ON DELETE CASCADE,
    UNIQUE(dictionary_id, character)
);

CREATE INDEX dictionary_kanji_dictionary_id ON dictionary_kanji(dictionary_id);
CREATE INDEX dictionary_kanji_character ON dictionary_kanji(character);

CREATE TABLE dictionary_term_meta (
    _id INTEGER PRIMARY KEY AUTOINCREMENT,
    dictionary_id INTEGER NOT NULL,
    expression TEXT NOT NULL,
    mode TEXT NOT NULL,
    data TEXT NOT NULL,
    FOREIGN KEY(dictionary_id) REFERENCES dictionaries(_id) ON DELETE CASCADE
);

CREATE INDEX dictionary_term_meta_dictionary_id ON dictionary_term_meta(dictionary_id);
CREATE INDEX dictionary_term_meta_expression ON dictionary_term_meta(expression);

CREATE TABLE dictionary_kanji_meta (
    _id INTEGER PRIMARY KEY AUTOINCREMENT,
    dictionary_id INTEGER NOT NULL,
    character TEXT NOT NULL,
    mode TEXT NOT NULL,
    data TEXT NOT NULL,
    FOREIGN KEY(dictionary_id) REFERENCES dictionaries(_id) ON DELETE CASCADE
);

CREATE INDEX dictionary_kanji_meta_dictionary_id ON dictionary_kanji_meta(dictionary_id);
CREATE INDEX dictionary_kanji_meta_character ON dictionary_kanji_meta(character);

-- Dictionary queries

getDictionary:
SELECT *
FROM dictionaries
WHERE _id = :id;

getAllDictionaries:
SELECT *
FROM dictionaries
ORDER BY priority DESC, title ASC;

selectLastInsertedRowId:
SELECT last_insert_rowid();

insertDictionary:
INSERT INTO dictionaries(title, revision, version, author, url, description, attribution, is_enabled, priority, date_added)
VALUES (:title, :revision, :version, :author, :url, :description, :attribution, :is_enabled, :priority, :date_added);

updateDictionary:
UPDATE dictionaries
SET title = :title,
    revision = :revision,
    version = :version,
    author = :author,
    url = :url,
    description = :description,
    attribution = :attribution,
    is_enabled = :is_enabled,
    priority = :priority
WHERE _id = :id;

deleteDictionary:
DELETE FROM dictionaries
WHERE _id = :id;

-- Tag queries

getTagsForDictionary:
SELECT *
FROM dictionary_tags
WHERE dictionary_id = :dictionaryId
ORDER BY tag_order ASC;

insertTag:
INSERT INTO dictionary_tags(dictionary_id, name, category, tag_order, notes, score)
VALUES (:dictionary_id, :name, :category, :tag_order, :notes, :score);

deleteTagsForDictionary:
DELETE FROM dictionary_tags
WHERE dictionary_id = :dictionaryId;

-- Term queries

searchTerms:
SELECT T.*
FROM dictionary_terms AS T
JOIN dictionaries AS D ON T.dictionary_id = D._id
WHERE T.dictionary_id IN :dictionaryIds
  AND D.is_enabled = 1
  AND (
    T.expression = :query
    OR T.reading = :query
    OR T.expression LIKE :query || '%'
    OR T.reading LIKE :query || '%'
    OR T._id IN (
      SELECT rowid FROM dictionary_terms_fts
      WHERE dictionary_terms_fts MATCH :query
    )
  )
ORDER BY
  CASE
    WHEN T.expression = :query THEN 0
    WHEN T.reading = :query THEN 1
    WHEN T.expression LIKE :query || '%' THEN 2
    WHEN T.reading LIKE :query || '%' THEN 3
    ELSE 4
  END,
  T.score DESC
LIMIT :limit;

getTermsByExpression:
SELECT T.*
FROM dictionary_terms AS T
JOIN dictionaries AS D ON T.dictionary_id = D._id
WHERE T.expression = :expression
  AND T.dictionary_id IN :dictionaryIds
  AND D.is_enabled = 1
ORDER BY T.score DESC;

insertTerm:
INSERT INTO dictionary_terms(dictionary_id, expression, reading, definition_tags, rules, score, glossary, sequence, term_tags)
VALUES (:dictionary_id, :expression, :reading, :definition_tags, :rules, :score, :glossary, :sequence, :term_tags);

deleteTermsForDictionary:
DELETE FROM dictionary_terms
WHERE dictionary_id = :dictionaryId;

-- Kanji queries

getKanjiByCharacter:
SELECT K.*
FROM dictionary_kanji AS K
JOIN dictionaries AS D ON K.dictionary_id = D._id
WHERE K.character = :character
  AND K.dictionary_id IN :dictionaryIds
  AND D.is_enabled = 1;

insertKanji:
INSERT INTO dictionary_kanji(dictionary_id, character, onyomi, kunyomi, tags, meanings, stats)
VALUES (:dictionary_id, :character, :onyomi, :kunyomi, :tags, :meanings, :stats);

deleteKanjiForDictionary:
DELETE FROM dictionary_kanji
WHERE dictionary_id = :dictionaryId;

-- Term meta queries

getTermMetaForExpression:
SELECT M.*
FROM dictionary_term_meta AS M
JOIN dictionaries AS D ON M.dictionary_id = D._id
WHERE M.expression = :expression
  AND M.dictionary_id IN :dictionaryIds
  AND D.is_enabled = 1;

insertTermMeta:
INSERT INTO dictionary_term_meta(dictionary_id, expression, mode, data)
VALUES (:dictionary_id, :expression, :mode, :data);

deleteTermMetaForDictionary:
DELETE FROM dictionary_term_meta
WHERE dictionary_id = :dictionaryId;

-- Kanji meta queries

getKanjiMetaForCharacter:
SELECT M.*
FROM dictionary_kanji_meta AS M
JOIN dictionaries AS D ON M.dictionary_id = D._id
WHERE M.character = :character
  AND M.dictionary_id IN :dictionaryIds
  AND D.is_enabled = 1;

insertKanjiMeta:
INSERT INTO dictionary_kanji_meta(dictionary_id, character, mode, data)
VALUES (:dictionary_id, :character, :mode, :data);

deleteKanjiMetaForDictionary:
DELETE FROM dictionary_kanji_meta
WHERE dictionary_id = :dictionaryId;
